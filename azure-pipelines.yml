variables:
  DOCKER_REGISTRY_FQDN: dtr.us.demo.mirantis.com
  DOCKER_REGISTRY_IMAGE: dtr.us.demo.mirantis.com/mruiz-dev/retro-store
  K8S_NAMESPACE: mruiz-dev
  K8S_DEPLOYMENT: retro-store-deployment
  K8S_CONTAINER: web
  
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - one-tier/*

stages:
  - stage: build
    displayName: Build & Push to DTR
    jobs:
      - job: build_windows
        displayName: "Build Windows Container"
        pool:
          vmImage: windows-2019
          # name: "Shared SE - Windows"
          # demands:
          #   - agent.os -equals Windows_NT
          #   - docker
        variables:
          DOCKER_BUILDKIT: 0
        steps:
          - powershell: |
              Write-Host "Getting User";
              whoami;
            displayName: "Get User"
          
          - powershell: |
              Write-Host "Getting Docker Version"
              docker version;
            displayName: "Get Docker Version"
          
          - powershell: |
              Write-Host "Set insecure registry in daemon configuration";
              
              # Create a daemon.json configuration file with the insecure registry listed
              Set-Content `
                -Path $env:ProgramData\docker\config\daemon.json `
                -Value $('{{"insecure-registries": ["{0}"]}}' -f $env:DOCKER_REGISTRY_FQDN);
                -Value $('{{"allow-nondistributable-artifacts": ["{0}"]}}' -f $env:DOCKER_REGISTRY_FQDN);
              
              # Restart Docker to reload configuration
              Restart-Service docker;
            displayName: "Ignore Registry"

          - powershell: |
              # Login to the Docker Trusted Registry
              docker login $(DOCKER_REGISTRY_FQDN) `
                --username $(DOCKER_REGISTRY_USERNAME) `
                --password $(DOCKER_REGISTRY_TOKEN);
            displayName: "Login to Docker Trusted Registry"
            errorActionPreference: silentlyContinue
          
          - powershell: |
              docker build `
                --file .\one-tier\Dockerfile `
                --tag $(DOCKER_REGISTRY_IMAGE):"$(Get-Date -Format "yyyy.MM.dd").$(git rev-parse --short HEAD)" `
                .\one-tier;
            displayName: "Build Docker Image"
          
          - powershell: |
              docker push $(DOCKER_REGISTRY_IMAGE):"$(Get-Date -Format "yyyy.MM.dd").$(git rev-parse --short HEAD)";
            displayName: "Push Docker Image"
          
          - powershell: |
              docker image rm $(DOCKER_REGISTRY_IMAGE):"$(Get-Date -Format "yyyy.MM.dd").$(git rev-parse --short HEAD)";
            displayName: "Tidy Up"

  # - stage: deploy
  #   displayName: Deploy to Docker Enterprise
  #   dependsOn:
  #   - build
  #   jobs:
  #   - job: kubectl
  #     displayName: 'Deploy Container with kubectl'
  #     pool:
  #       vmImage: windows-2019
  #       # name: 'Shared SE - Linux'
  #       # demands:
  #       # - agent.os -equals Linux
  #       # - docker
  #     steps:
  #     - task: DownloadSecureFile@1
  #       inputs:
  #         secureFile: 'ucp-bundle-azure-devops.zip'

  #     - powershell: |
  #         # Unzip Docker Client Bundle from UCP
  #         Expand-Archive `
  #           -LiteralPath $(Agent.TempDirectory)/ucp-bundle-azure-devops.zip `
  #           -DestinationPath $(Build.SourcesDirectory)/bundle;
  #         Get-ChildItem -Path $(Build.SourcesDirectory)/bundle;
  #       displayName: 'Setup Docker Client Bundle'

  #     - powershell: |
  #         # Load Client Bundle and update image tag
  #         Set-Location -Path $(Build.SourcesDirectory)/bundle;
  #         Import-Module -Name .\env.ps1;
          
  #         # Set the image tag of the application's container
  #         kubectl set image `
  #           deployment/$(K8S_DEPLOYMENT) `
  #           $(K8S_CONTAINER)=$(DOCKER_REGISTRY_IMAGE):"$(git rev-parse --short HEAD)" `
  #           --namespace $(K8S_NAMESPACE);
  #       displayName: 'Update application with kubectl'